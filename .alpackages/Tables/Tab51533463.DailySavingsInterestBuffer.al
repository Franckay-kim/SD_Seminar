table 51533463 "Daily Savings Interest Buffer"
{
    Caption = 'Daily Savings Interest Buffer';
    DataClassification = ToBeClassified;

    fields
    {
        field(1; "Entry No."; Integer)
        {
            Caption = 'Entry No.';
            AutoIncrement = true;
            DataClassification = ToBeClassified;
        }
        field(2; "Account No."; Code[20])
        {
            Caption = 'Account No.';
            DataClassification = ToBeClassified;
        }
        field(3; "Interest Date"; Date)
        {
            Caption = 'Interest Date';
            DataClassification = ToBeClassified;
        }
        field(4; "Generation Date"; Date)
        {
            Caption = 'Generation Date';
            DataClassification = ToBeClassified;
        }
        field(5; "Generated By"; Code[50])
        {
            Caption = 'Generated By';
            DataClassification = ToBeClassified;
        }
        field(6; Posted; Boolean)
        {
            Caption = 'Posted';
            DataClassification = ToBeClassified;
        }
        field(7; Amount; Decimal)
        {
            Caption = 'Amount';
            DataClassification = ToBeClassified;
        }
        field(8; "Account Balance"; Decimal)
        {
            Caption = 'Account Balance';
            DataClassification = ToBeClassified;
        }
        field(9; "Interest Rate"; Decimal)
        {

        }
        field(10; "FDR No."; Code[20])
        {

        }

    }
    keys
    {
        key(PK; "Entry No.")
        {
            Clustered = true;
        }
    }

    procedure InitEntry(AccNo: Code[20]; IntDate: Date; GenDate: Date; Amt: Decimal; AccBal: Decimal; IRate: Decimal; FDR: Code[20])
    begin
        "Entry No." := 0;
        "Account No." := AccNo;
        "Interest Date" := IntDate;
        "Generation Date" := GenDate;
        "Generated By" := UserId;
        Amount := Amt;
        "Account Balance" := AccBal;

        "Interest Rate" := IRate;
        "FDR No." := FDR;
        Insert(true);

    end;

    local procedure ChargedAsAt(AccNo: Code[20]; FdrNo: Code[20]; AsAt: Date): Boolean
    begin
        Reset();
        SetRange("Account No.", AccNo);
        SetRange("Interest Date", AsAt);
        SetRange("FDR No.", FdrNo);
        exit(FindFirst())
    end;

    procedure GenerateDailyInterest(AsAt: Date)
    var
        SavingsAcc: Record "Savings Accounts";
        FdLines: Record "Fixed Deposit Lines";
        IntAmt: Decimal;
        ProdFact: Record "Product Factory";
        DaysInYear: Integer;
    begin
        //clear vars
        Clear(IntAmt);
        DaysInYear := CalcDate('CY', AsAt) - CalcDate('-CY', AsAt);

        FdLines.Reset();
        FdLines.SetRange(Status, FdLines.Status::Active);
        FdLines.SetRange(Type, FdLines.Type::"Call Deposit");
        if FdLines.Find('-') then
            repeat
                If SavingsAcc.Get(FdLines."FDR No.") then begin
                    IF ChargedAsAt(FdLines."No.", FdLines."FDR No.", AsAt) = false then begin
                        ProdFact.Reset();
                        ProdFact.SetRange("Product ID", SavingsAcc."Product Type");
                        ProdFact.SetRange("Earns Interest", true);
                        IF ProdFact.Find('-') then begin
                            SavingsAcc.CalcFields("Balance (LCY)");
                            if SavingsAcc."Balance (LCY)" >= FdLines.Amount then begin
                                if ProdFact."Interest Calc Min Balance" <= SavingsAcc."Balance (LCY)" then begin
                                    IntAmt := (SavingsAcc."Neg. Interest Rate" * FdLines.Amount) / (DaysInYear * 100);
                                    //create interest entry
                                    InitEntry(FdLines."No.", AsAt, Today, IntAmt, SavingsAcc."Balance (LCY)", FdLines."Rate (%)", SavingsAcc."No.");
                                end;
                            end;
                        end;

                    end;
                end;

            until FdLines.Next() = 0;

    end;

    procedure PostEarnedInterest(AccNo: code[20]; FdNo: Code[20])
    var
        //JournalPosting: Codeunit "Journal Posting";
        Temp: Record "Banking User Template";
        AccType: Enum "Gen. Journal Account Type";
        TransType: Option " ",Loan,Repayment,"Interest Due","Interest Paid",Bills,"Appraisal Due","Ledger Fee","Appraisal Paid","Pre-Earned Interest","Penalty Due","Penalty Paid";
        ProdFact: Record "Product Factory";
        SavingsAcc: Record "Savings Accounts";
    begin

        Temp.Get(UserId);

        Temp.TestField("Interest Account Template");
        Temp.TestField("Interest Account Batch");

        Reset();
        SetRange("Account No.", AccNo);
        SetRange("FDR No.", FdNo);
        SetRange(Posted, false);
        /* if FindSet() then begin
             IF SavingsAcc.get(FdNo) then begin
                 ProdFact.Get(SavingsAcc."Product Type");
                 CalcSums(Amount);

                 JournalPosting.ClearJournalLines(Temp."Interest Account Template", Temp."Interest Account Batch");

                 ///now post accumulated interest
                 JournalPosting.PostJournal(Temp."Interest Account Template", Temp."Interest Account Batch",
                 1000, AccType::Savings, 'INT-' + AccNo, 'Int Earned ' + FdNo, Amount, FdNo, WorkDate(), AccType::"G/L Account",
                 ProdFact."Interest Expense Account", AccNo, Temp."Shortcut Dimension 1 Code", Temp."Shortcut Dimension 2 Code",
                 TransType::" ", '', '', '', 0, '', 0, false);

                 JournalPosting.CompletePosting(Temp."Interest Account Template", Temp."Interest Account Batch");

             end;
         end; */
    end;
}
